from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters import Command
from datetime import datetime, timedelta
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from os import environ
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(filename)s [LINE:%(lineno)d] # %(levelname)-8s [%(asctime)s]  %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = environ["TELEGRAM_TOKEN"]
ADMIN_IDS = [1294375064, 528911118]
GROUP_CHAT_ID = "-1001234567890"  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ScheduleStates(StatesGroup):
    waiting_for_day = State()
    waiting_for_time = State()
    waiting_for_event_name = State()
    waiting_for_event_date = State()
    waiting_for_event_reminder = State()


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
schedule = {
    "default_day": 1,  # 0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 1-–≤—Ç–æ—Ä–Ω–∏–∫ –∏ —Ç.–¥.
    "default_time": "15:00",
    "events": {},
    "holidays": [
        # –ó–∏–º–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã
        "2024-12-30",
        "2024-12-31",
        "2025-01-01",
        "2025-01-02",
        "2025-01-03",
        "2025-01-04",
        "2025-01-05",
        "2025-01-06",
        "2025-01-07",
        "2025-01-08",
        "2025-01-09",
        "2025-01-10",
        "2025-01-11",
        "2025-01-12",
        # –í–µ—Å–µ–Ω–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã
        "2025-03-22",
        "2025-03-23",
        "2025-03-24",
        "2025-03-25",
        "2025-03-26",
        "2025-03-27",
        "2025-03-28",
        "2025-03-29",
        "2025-03-30",
        "2025-03-31",
        # –õ–µ—Ç–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã
        *[
            f"2025-{month:02d}-{day:02d}"
            for month in range(6, 9)
            for day in range(1, 32)
        ],
    ],
}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(user_id: int):
    return user_id in ADMIN_IDS


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    help_text = """
<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start –∏–ª–∏ /help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/schedule - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/next_event - –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ

<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/change_day - –∏–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π
/change_time - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π
/add_event - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
/list_events - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
"""
    await message.answer(help_text, parse_mode=ParseMode.HTML)


# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(commands=["schedule"])
async def cmd_schedule(message: types.Message):
    days = [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–≤—Ç–æ—Ä–Ω–∏–∫",
        "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞",
        "—Å—É–±–±–æ—Ç–∞",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ]
    text = (
        f"üìÖ <b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        f"–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–∂–¥—É—é {days[schedule['default_day']]} –≤ {schedule['default_time']}\n\n"
        f"<b>–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n"
    )

    if schedule["events"]:
        sorted_events = sorted(schedule["events"].items(), key=lambda x: x[1]["date"])
        for event_name, event_data in sorted_events[
            :3
        ]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è
            text += f"- {event_name}: {event_data['date']} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {event_data['reminder_days']} –¥–Ω.)\n"
    else:
        text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"

    await message.answer(text, parse_mode=ParseMode.HTML)


# –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["change_day"])
async def cmd_change_day(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    days = [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–≤—Ç–æ—Ä–Ω–∏–∫",
        "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞",
        "—Å—É–±–±–æ—Ç–∞",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ]
    keyboard.add(*days)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–Ω—è—Ç–∏–π:", reply_markup=keyboard)
    await ScheduleStates.waiting_for_day.set()


@dp.message_handler(state=ScheduleStates.waiting_for_day)
async def process_day_change(message: types.Message, state: FSMContext):
    days = [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–≤—Ç–æ—Ä–Ω–∏–∫",
        "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞",
        "—Å—É–±–±–æ—Ç–∞",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ]
    if message.text.lower() not in days:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return

    new_day = days.index(message.text.lower())
    schedule["default_day"] = new_day
    await state.finish()
    await message.answer(
        f"–î–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}",
        reply_markup=types.ReplyKeyboardRemove(),
    )


# –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["change_time"])
async def cmd_change_time(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:00):"
    )
    await ScheduleStates.waiting_for_time.set()


@dp.message_handler(state=ScheduleStates.waiting_for_time)
async def process_time_change(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        schedule["default_time"] = message.text
        await state.finish()
        await message.answer(f"–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}")
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
        )


# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["add_event"])
async def cmd_add_event(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞—â–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤'):")
    await ScheduleStates.waiting_for_event_name.set()


@dp.message_handler(state=ScheduleStates.waiting_for_event_name)
async def process_event_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["event_name"] = message.text

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-15):"
    )
    await ScheduleStates.waiting_for_event_date.set()


@dp.message_handler(state=ScheduleStates.waiting_for_event_date)
async def process_event_date(message: types.Message, state: FSMContext):
    try:
        event_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        async with state.proxy() as data:
            data["event_date"] = message.text

        await message.answer("–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏–∏? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ):")
        await ScheduleStates.waiting_for_event_reminder.set()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î"
        )


@dp.message_handler(state=ScheduleStates.waiting_for_event_reminder)
async def process_event_reminder(message: types.Message, state: FSMContext):
    try:
        reminder_days = int(message.text)
        async with state.proxy() as data:
            event_name = data["event_name"]
            event_date = data["event_date"]

        schedule["events"][event_name] = {
            "date": event_date,
            "reminder_days": reminder_days,
            "reminder_sent": False,
        }

        await state.finish()
        await message.answer(
            f"–°–æ–±—ã—Ç–∏–µ '{event_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {event_date} —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞ {reminder_days} –¥–Ω–µ–π"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")


# –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["list_events"])
async def cmd_list_events(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not schedule["events"]:
        await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return

    text = "üìù <b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n"
    for event_name, event_data in schedule["events"].items():
        text += f"- {event_name}: {event_data['date']} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {event_data['reminder_days']} –¥–Ω.)\n"

    await message.answer(text, parse_mode=ParseMode.HTML)


# –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
@dp.message_handler(commands=["next_event"])
async def cmd_next_event(message: types.Message):
    if not schedule["events"]:
        await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        return

    now = datetime.now().date()
    future_events = {
        k: v
        for k, v in schedule["events"].items()
        if datetime.strptime(v["date"], "%Y-%m-%d").date() >= now
    }

    if not future_events:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
        return

    next_event_name, next_event_data = min(
        future_events.items(),
        key=lambda x: datetime.strptime(x[1]["date"], "%Y-%m-%d").date(),
    )

    await message.answer(
        f"üóì <b>–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ:</b>\n"
        f"{next_event_name} - {next_event_data['date']}\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {next_event_data['reminder_days']} –¥–Ω–µ–π",
        parse_mode=ParseMode.HTML,
    )


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminder(chat_id, text):
    try:
        await bot.send_message(chat_id, text)
        logging.info(f"Reminder sent to {chat_id}: {text}")
    except Exception as e:
        logging.error(f"Error sending reminder to {chat_id}: {e}")


async def check_schedule():
    while True:
        now = datetime.now()
        today = now.date()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
        if (
            now.weekday() == schedule["default_day"]
            and str(today) not in schedule["holidays"]
            and now.hour == 7
            and now.minute == 0
        ):

            await send_reminder(
                GROUP_CHAT_ID,
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–µ –ø–æ –ö–∏–±–µ—Ä–®–∫–æ–ª–µ –≤ {schedule['default_time']}",
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π
        if str(today) in schedule["holidays"] and now.hour == 9 and now.minute == 0:
            await send_reminder(
                GROUP_CHAT_ID, "üåû –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—É–¥–µ—Ç! –û—Ç–¥—ã—Ö–∞–π—Ç–µ."
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
        for event_name, event_data in schedule["events"].items():
            event_date = datetime.strptime(event_data["date"], "%Y-%m-%d").date()
            reminder_date = event_date - timedelta(days=event_data["reminder_days"])

            if today == reminder_date and not event_data["reminder_sent"]:
                await send_reminder(
                    GROUP_CHAT_ID,
                    f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ '{event_name}' —á–µ—Ä–µ–∑ {event_data['reminder_days']} –¥–Ω–µ–π ({event_data['date']})",
                )
                event_data["reminder_sent"] = True

            if today == event_date and now.hour == 9 and now.minute == 0:
                await send_reminder(
                    GROUP_CHAT_ID, f"üéâ –°–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–µ: {event_name}! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!"
                )

        await asyncio.sleep(60)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    asyncio.create_task(check_schedule())
    logging.info("Bot started")
